{
    "code": 10000,
    "data": {
        "controller": "关于控制说明\n===========\n\n[TOC]\n\n基础控制 `jinxing\\admin\\controllers\\Controller` \n继承自 [yii\\web\\Controller](http:\/\/www.yiichina.com\/doc\/api\/2.0\/yii-web-controller), \n所有父类的方法，都可以使用\n\n## 受保护属性，子类需要根据实际情况重写\n\n|属性名称 | 类型 | 默认值 | 说明|\n|:----------|:---------|:---------|:-----------|\n|`$modelClass`| `string`   | `\\jinxing\\admin\\models\\Admin`  | [数据使用的 model](http:\/\/www.yiichina.com\/doc\/api\/2.0\/yii-db-activerecord)|  \n|`$pk`        | `string`   | `id`       | `model` 查询使用的主键 `key`|\n|`$sort`      | `string`   | `id`       | 默认排序使用的字段名称|\n|`$strategy`  | `string`   | `DataTables` or `JqGrid`| 使用DataTables 显示数据还是JqGrid 使用数据，根据模板视图使用的 js 修改|\n|`$uploadFromClass`|`string`| `jinxing\\admin\\models\\forms\\UploadForm`| 上传使用表单验证类(UploadForm 中需要定义上传文件字段和验证类型)|\n|`$strUploadPath`|`string` | `.\/uploads\/`| 上传文件保存文件地址|\n\n## 请求公共的方法\n\n|方法名称           | 说明          | 相关方法|\n|:----------------|:------------|:----------------------------|\n|`actionIndex()`    | 显示视图页面      |\n|`actionSearch()`   | 为视图文件提供数据 |[where() Provide query conditions](#where-public-method)、[getQuery() Provide query object](#getquerywhere-protected-method)、[afterSearch() Data processing after query](#aftersearcharray-protected-method)|\n|`actionCreate()`   | 创建数据         |--|\n|`actionUpdate()`   | 修改数据         |--|\n|`actionDelete()`   | 删除数据         |--|\n|`actionDeleteAll()`| 删除多条数据      |--|\n|`actionEditable()` | 行内编辑         |--|\n|`actionUpload()`   | 上传文件         | [ afterUpload() File upload processing](#afteruploadfilepath-field-object-protected-method)|\n|`actionExport()`   | 导出数据         | [where() Provide query conditions](#where-public-method)、[getQuery() Provide query object](#getquerywhere-protected-method)、[getExportHandleParams() Provide data export processing parameters ](#getexporthandleparams-protected-method)|\n\n## 其他方法\n\n### `getPk()` public method\n> return `string`\n\n获取主键名称\n\n### `where()` public method\n\n> return `array`\n\n用来处理查询请求字段对应后端SQL查询表达式\n\n```php\nprotected function where()\n{\n    return [\n        \/\/ 表示前端请求查询字段 id、status、type 都使用 = 查询\n        [['id', 'status', 'type'], '='],\n        \n        \/\/ 表示前端请求查询字段 username、email 都使用 like 查询\n        [['username', 'email'], 'like'],\n    ];\n}\n```\n\n#### 支持配置方式\n1. `key` => `value` 方式\n\n    ```php\n    protected function where()\n    {\n        return [\n            \/\/ 简单处理\n            'id' => '=',\n            'username' => 'like',\n         \n            \/\/ 复杂处理, 使用数组\n            'email' => [\n               'field' => 'user.email', \/\/ 修改字段\n               'func'  => 'trim',       \/\/ 使用函数处理值\n               'and'   => 'like',       \/\/ 使用的连接表达式   \n            ],\n         \n            \/**\n             * 复杂处理，使用匿名函数\n             * \n             * @param mixed  $value  前端请求过来的值\n             * @param string $column 前端对应的字段名称, 不使用的话，可以不用接收\n             * @return array 需要返回一个数组\n             *\/\n            'nickname' => function ($value, $key) {\n                return ['like', $key, $value];\n                \n                \/\/ (`nickname` like '%{$value}%' or `username` like '%{$value}%')\n                \/\/ return ['or', ['like', 'nickname', $value], ['like', 'username', $value]];\n            },\n        ];\n    }\n    ```\n    \n2. 数组方式, 和 `key` => `value` 支持配置方式一致，只是改为数组方式，可以一个表达式对应多个字段 \n\n`[字段, 表达式]`\n\n    ```php\n        protected function where()\n        {\n            return [\n                \/\/ 简单处理\n                [['id', 'type'], '=']\n    \n                \/\/ 复杂处理, 使用数组\n                ['email', [\n                    'field' => 'user.email', \/\/ 修改字段\n                    'func'  => 'trim',       \/\/ 使用函数处理值\n                    'and'   => 'like',       \/\/ 使用的连接表达式   \n                ]],\n            \n                \/\/ 复杂处理，使用匿名函数\n                [['username', 'nickname', 'name'], function ($value, $key) {\n                    return ['like', $key, $value];\n                }],\n            ];\n        }\n    ```\n#### 定义默认查询条件,指定字段`where`，必须为二维数组`array`\n\n```php\nprotected function where()\n{\n    return [\n        \/\/ 定义默认查询条件\n        'where' => [['=', 'status', 1], ['=', 'type', 1]],\n    ];\n}\n```\n\n### `getQuery($where)` protected method\n> return [yii\\db\\Query](http:\/\/www.yiichina.com\/doc\/api\/2.0\/yii-db-query) or [yii\\db\\ActiveRecord](http:\/\/www.yiichina.com\/doc\/api\/2.0\/yii-db-activerecord) \n\n**如果是比较复杂的查询，可以复写这个方法(比如联表查询)**\n\n```php \n    protected function getQuery($where)\n    {\n        return (new Query())->from('user')->leftJoin('actrive', 'user.id=active.user_id')->where($where);\n    }\n\n```\n\n### `afterSearch(&$array)` protected method\n\n用来对 [getQuery ()](#getquerywhere-protected-method) 方法查询出的分页数据做进一步处理(查询使用 model 查询，其实也可以在afterFind() 方法里面处理) :\n\n```php\n    protected function afterSearch(&$array) \n    {\n        foreach ($array as &$value) {\n            $value['created_at']  = date('Y-m-d H:i:s', $value['created_at']);\n            $value['status_name'] = $value['status'] == 10 ? 'open' : 'close'; \n        }\n        \n        unset($value);\n    }\n```\n\n### `findOne($data = [])` protected method\n\n> return [yii\\db\\ActiveRecord](http:\/\/www.yiichina.com\/doc\/api\/2.0\/yii-db-activerecord)\n\n通过请求参数查询到对象，没有会设置错误，返回false\n\n### `afterUpload($filePath, $field, $object)` protected method\n\n> return `string`\n\n上传文件之后的处理，处理成功需要返回 文件保存地址\n\n### getExportHandleParams() protected method\n> return `array`\n\n对导出的数据做格式化处理(因为显示数据时在视图里面做的格式化处理，如果导出数据也要做格式化处理，需要定义这个方法):\n\n```php\n    protected function getExportHandleParams()\n    {\n        return [\n            \/\/ 使用匿名函数处理，$value 为查询结果中 created_at 字段的值\n            'created_at' => function ($value) {\n                return date('Y-m-d H:i:s', $value);\n            },\n            'status' => function ($value) {\n                return $value == 10 ? 'open' : 'close';\n            }\n        ];\n    }\n```\n\n[←  关于 module 配置数据](.\/module.md) | [ 关于 meTables 配置数据 →](https:\/\/github.com\/myloveGy\/jinxing-tables?_blank)",
        "faq": "FAQ\n===\n\n[TOC]\n\n以下整理了一些常见的问题，在提问之前建议找找有没有类似的问题。\n\n## 一 `composer` 安装问题(安装慢、或者有错误)\n\n1. 确认安装了[Composer Asset插件](https:\/\/github.com\/fxpio\/composer-asset-plugin)\n2. `composer` 使用[中国镜像](https:\/\/pkg.phpcomposer.com\/)\n3. 不使用`composer`,直接下载打包文件\n   * [百度网盘](https:\/\/pan.baidu.com\/s\/1frc7FxxL1Pkf2dd06m0tlA)\n   * [有道云笔记](https:\/\/note.youdao.com\/ynoteshare1\/index.html?id=4e1e59dd2ec2541796105d4d7afdb3c9)\n   * [CSDN](https:\/\/download.csdn.net\/download\/myliujx\/11193963)\n   \n### 安装完成，报目录不存在错误\n\n![登录页](.\/images\/asset-error.png)\n\n直接`cp` `vendor`目录下 `bower` 目录更名为 `bower-asset`\n\n\n## 二 连表操作怎么办？\n\n在控制器中重写 `getQuery`方法\n\n```php\npublic function getQuery($where)\n{\n    return Admin::find()->select(['*'])\n                ->innerJoin('admin_operate_logs', 'admin.id = admin_operate_logs.admin_id')\n                ->where($where)\n                ->asArray();\n}\n```\n\n能使用关联查询的请使用关联\n\n```php\npublic function getQuery($where)\n{\n    return Customer::find()->with('orders', 'country')->where($where)->asArray();\n}\n```\n\n## 三 怎么将请求参数传递到`search`方法的查询条件?\n\n1. 控制器`actionIndex`方法接收请求参数,传递到视图(或者直接在视图里面接收)\n\n    ```php\n    public function actionIndex()\n    {\n        $id = Yii::$app->request->get('id');\n        return $this->render('index', compact('id'));\n    }\n    ```\n\n2. 视图文件中，配置`meTables`的附加参数\n\n    ```php\n    var m = meTables({\n        params: {\n            id: <?php echo isset($id) ? $id : 'null' ?>,\n        }\n    })\n    ```\n    \n## 四 前端`meTables`配置相关问题\n\n### 4.1 视图怎么控制创建和修改表单不一致?\n\n通过 `meTables` 的`beforeShow` 方法实现，控制某个`input`的显示和隐藏\n\n```js\nvar m = meTables({\n    table: {\n        columns: [\n            {\n                title: \"用户名称\",\n                data: \"username\",\n                edit: {\n                    id: \"username\"\n                }\n            }\n        ]\n    }\n});\n\n\/\/ 用户名字段在创建的时候显示出来，修改的时候隐藏起来\n$.extend(m, {\n    beforeShow: function() {\n        if (this.action === \"update\") {\n            $(\"#username\").attr('disable', true).hide();\n        } else  {\n            $(\"#username\").attr('disable', false).show();\n        }\n    }\n});\n```\n\n### 4.2 操作项指定按钮在特定情况下显示\n\n配置指定按钮的`show`方法\n\n`show`函数接受一个参数`rows`(这一行的数据)，需要返回`true`来确定显示\n\n```js\nvar m = meTables({\n    operations: {\n        buttons: {\n            \/\/ 配置show，根据情况显示删除 rows 表示这一行的数据\n            delete: {\n                show: function (rows) {\n                    return rows.status == 1;\n                }\n            }\n        }\n    }\n})\n```\n\n### 4.3 怎么为搜索`select`,编辑`select`,`radio`提供数据\n\n配置那一列的`value`，数据格式为 `object` `{value1:label1, value2: label2}`\n\n```js\nm = meTables({\n    title: \"用户信息\",\n    table: {\n        columns: [\n            {\n                title: \"状态\",\n                data: \"status\", \n                edit: {type: \"select\"},\n                search: {type: \"select\"},\n                value: {\n                  1: \"启用\",\n                  2: \"停用\"  \n                },\n                sortable: false\n            }\n         ]\n    }\n})\n\n```\n\n[更多`meTabls`说明>>](.\/metables.md)\n\n## 五 控制器相关问题\n\n### 5.1 查询数据问题\n\n前端需要配置搜索`input`, 就是每一列的 `search` 配置项\n\n控制器需要定义`where`方法处理查询\n\n```php\npublic function where()\n{\n    \n    return [\n        \/\/ 第一个元素定义查询字段，第二个元素定义查询方式\n        ['status', '='],\n    ];\n}\n```\n>为什么需要`where`来处理查询方式，主要为了简化前端工作，让后端来处理复杂查询\n\n1. 比如前端一个搜索框，`name` 为 `username`, 需要后端同时搜索用户名、用户昵称、邮箱\n```php\npublic function where()\n{\n    return [\n        ['username', function ($value) {\n            return [\n                'or', \n                ['like', 'username', $value], \n                ['like', 'nickname', $value],\n                ['like', 'email', $value],\n            ];\n        }]\n    ];\n}\n```\n\n2. `where`可以定义默认的查询条件\n```php\npublic function where()\n{\n    return [\n        \/\/ 注意 where 为一个二维数组\n        'where' => [['=', 'status', 1]],\n        \n        \/\/ 其他请求查询条件 \n        [['username', 'email'], 'like'], \/\/ username、email 都使用 like 查询\n    ];\n}\n```",
        "home": "Yii2 Ace Admin 后台扩展模块\n==========================\n\n![Progress](http:\/\/progressed.io\/bar\/100?title=completed) \n[![Latest Stable Version](https:\/\/poser.pugx.org\/jinxing\/yii2-admin\/v\/stable)](https:\/\/packagist.org\/packages\/jinxing\/yii2-admin)\n[![Total Downloads](https:\/\/poser.pugx.org\/jinxing\/yii2-admin\/downloads)](https:\/\/packagist.org\/packages\/jinxing\/yii2-admin)\n[![Latest Unstable Version](https:\/\/poser.pugx.org\/jinxing\/yii2-admin\/v\/unstable)](https:\/\/packagist.org\/packages\/jinxing\/yii2-admin)\n[![GitHub issues](https:\/\/img.shields.io\/github\/issues\/myloveGy\/yii2-admin.svg)](https:\/\/github.com\/myloveGy\/yii2-admin\/issues)\n[![GitHub forks](https:\/\/img.shields.io\/github\/forks\/myloveGy\/yii2-admin.svg)](https:\/\/github.com\/myloveGy\/yii2-admin\/network)\n[![GitHub stars](https:\/\/img.shields.io\/github\/stars\/myloveGy\/yii2-admin.svg)](https:\/\/github.com\/myloveGy\/yii2-admin\/stargazers)\n[![GitHub license](https:\/\/img.shields.io\/github\/license\/myloveGy\/yii2-admin.svg)](https:\/\/github.com\/myloveGy\/yii2-admin\/blob\/master\/LICENSE.md)\n\n[change to English](https:\/\/github.com\/myloveGy\/yii2-admin\/blob\/master\/README.en-US.md)\n\n## 作者博客\n\n[https:\/\/mylovegy.github.io\/blog\/](https:\/\/mylovegy.github.io\/blog\/)\n\n## 简介\n\n使用的 [ace admin](http:\/\/ace.jeka.by\/) 前端框架, 为`yii2`开发的一个后台模块; \n对于二次开发比较方便，包含了基本的后台功能\n\n## 功能特性\n\n* 包含基本的后台功能\n    - 管理员管理: 登录、登出、修改密码等\n    - 菜单管理: 可视化动态菜单、根据权限显示菜单\n    - 权限管理: 角色、权限、用户的管理  \n    \n* 使用`yii2`自带的`RBAC`权限管理\n* 对于二次开发比较方便\n    - 定义基本控制器(封装了基本的`CURD`操作), 后续开发基于基础控制器继承修改\n    - 拥有代码生成功能(类似于`gii`), 可视化生成代码模板, 简单操作即可生成 控制器`controller`、模型`model`, 视图`views`\n        文件，提高开发效率\n\n## 安装\n\n### 安装要求\n\n* PHP >= 5.4\n* MySQL\n\n### 全新项目安装\n\n全新项目安装可以直接使用[liujx\/yii2-app-advanced](https:\/\/packagist.org\/packages\/liujx\/yii2-app-advanced)\n\n### 在已有项目中安装\n\n使用 `composer` 下载包文件 \n\n```\ncomposer require jinxing\/yii2-admin\n```\n\n### 配置模块信息\n\n在你的 `main.php` 配置文件中添加下面配置\n\n```php\nreturn [\n    'modules' => [\n        'admin' => [\n            'class' => 'jinxing\\admin\\Module',\n        ]\n    ],\n    'components' => [\n        \n        \/\/ 后台登录用户组件信息\n        'admin' => [\n            'class'           => 'yii\\web\\User',\n            'identityClass'   => 'jinxing\\admin\\models\\Admin',\n            'enableAutoLogin' => true,\n            'loginUrl'        => ['\/admin\/admin\/default\/login'],\n            'idParam'         => '_adminId',\n            'identityCookie'  => ['name' => '_admin', 'httpOnly' => true],\n        ],\n        \n        \/\/ 后台使用的语言配置信息\n        'i18n' => [\n            'translations' => [\n                'admin' => [\n                    'class'          => 'yii\\i18n\\PhpMessageSource',\n                    'sourceLanguage' => 'en',\n                    'basePath'       => '@jinxing\/admin\/messages'\n                ],\n            ],\n        ],\n        \n        \/\/ 配置权限使用数据库\n        'authManager'  => [\n            'class' => 'yii\\rbac\\DbManager',\n        ],\n                \n    ]\n];\n```\n\n在你的 `params.php` 配置文件添加如下配置信息\n\n```php\nreturn [\n    \/\/ 这个配置是为了导入权限信息需要配置的，就是配置后台模块的路径 \n    'admin_rule_prefix' => 'admin',                        \n\n    \/\/ 登录成功首页是否需要显示其他信息\n    'projectOpenOther' => true,\n    \n    \/\/ 项目信息\n    'projectName'      => 'Yii2 后台管理系统',              \n    'projectTitle'     => 'Yii2 后台管理系统',\n    'companyName'      => '<span class=\"blue bolder\"> Liujinxing <\/span> Yii2 Admin 项目 &copy; 2016-2018',  \n];\n```\n\n#### [高级版本配置参考](\/yii2-admin\/document\/module#yii2高级版后台配置模板, '高级版本配置参考')\n#### [基础版本配置参考](\/yii2-admin\/document\/module#yii2基础版后台配置模板, '基础版本配置参考')\n\n### 使用数据库迁移、导入后台所需的数据库信息、需要顺序执行下面命令\n\n#### 需要配置 `console`\n\n在 `console` 配置中的 `components` 组件中加入权限配置信息\n\n```php\nreturn [\n    'components' => [\n        \/\/ 权限配置\n        'authManager'  => [\n            'class' => 'yii\\rbac\\DbManager',\n        ],\n    ],\n];\n``` \n\n- 高级版本的配置文件在 `console\/config\/main.php`中\n- 基础版本的配置文件在 `config\/console.php`中\n\n#### 导入权限表信息\n```\nphp yii migrate --migrationPath=@yii\/rbac\/migrations\n```\n\n#### 导入后台表信息和默认权限、菜单信息\n```\nphp yii migrate --migrationPath=@jinxing\/admin\/migrations\n```\n\n### 你可以愉快的使用了\n\n访问地址\n\n```\n\/\/ 登录地址、域名需要根据你的域名修改\nhttp:\/\/localhost\/path\/to?index.php?r=admin\/default\/login\n```\n\n#### 默认的账号和密码\n\n1. 超级管理员\n    - username: super  \n    - password: admin123\n\n2. 普通管理员\n    - username: admin\n    - password: admin888\n    \n## 在自己模块中使用\n\n### `Yii2` 高级版本中使用\n\n定义一个基础控制，其他控制器都继承基础控制器\n\n1. 控制器继承`jinxing\\admin\\controllers\\Controller` \n    - 定义控制器使用的布局文件为 `@jinxing\/admin\/views\/layouts\/main`\n    - 定义上传文件表单类使用自己的 ，例如：`backend\\models\\forms\\UploadForm`\n2. 如果要记录操作日志和权限验证，定义行为\n    - 记录日志行为类： `jinxing\\admin\\behaviors\\Logging` \n    \n        默认只会记录： create, update, delete, delete-all, editable, upload 操作的日志，\n        需要添加或者修改，定义`needLogActions` 属性\n    \n    - 权限验证行为类： `yii\\filters\\AccessControl` [类的属性和配置参考](https:\/\/www.yiichina.com\/doc\/api\/2.0\/yii-filters-accesscontrol)\n\n例子：\n```php\nnamespace backend\\controllers;\n\nuse jinxing\\admin\\behaviors\\Logging;\nuse jinxing\\admin\\controllers\\Controller as BaseController;\nuse yii\\filters\\AccessControl;\n\n\/**\n * Class Controller 后台的基础控制器\n * @package backend\\controllers\n *\/\nclass Controller extends BaseController\n{\n    \/**\n     * @var string 使用 yii2-admin 的布局\n     *\/\n    public $layout = '@jinxing\/admin\/views\/layouts\/main';\n    \n    \/**\n     * @var string 使用自己定义的上传文件处理表单\n     *\/\n    public $uploadFromClass = 'backend\\models\\forms\\UploadForm';\n    \n    \/**\n     * 定义使用的行为\n     *\n     * @return array\n     *\/\n    public function behaviors()\n    {\n        return [\n            'access' => [\n                'class' => AccessControl::className(),\n                'rules' => [\n                    [\n                        'allow'       => true,\n                        'permissions' => [$this->action->getUniqueId()],\n                    ],\n                ],\n            ],\n            \n            'logging' => [\n                'class' => Logging::className(),\n            ],\n        ];\n    }\n}\n```\n\n### `Yii2` 基础版本中使用\n\n`yii2` 基础版本需要为后台定义一个模块，这个模块可以直接继承`jinxing\\admin\\Module`\n\n例子：\n```php\nnamespace app\\modules\\admin;\n\nuse Yii;\nuse jinxing\\admin\\Module;\n\n\/**\n * admin module definition class\n *\/\nclass Admin extends Module\n{\n    \/**\n     * {@inheritdoc}\n     *\/\n    public $controllerNamespace = 'app\\modules\\admin\\controllers';\n    \n    \/**\n     * {@inheritdoc}\n     *\/\n    public function init()\n    {\n        parent::init();\n        Yii::$app->errorHandler->errorAction = $this->getUniqueId() . '\/admin\/default\/error';\n    }\n}\n```\n\n>如果不使用模块继承方式，配置参考高级版本\n\n## 使用文档\n\n### [模块配置说明](https:\/\/mylovegy.github.io\/yii2-admin\/docs\/module.html)\n### [控制器配置说明](https:\/\/mylovegy.github.io\/yii2-admin\/docs\/controller.html)\n### [前端`MeTables`配置说明](https:\/\/github.com\/myloveGy\/jinxing-tables?_blank)\n\n## 后台预览\n\n1. 登录页面\n![登录页](https:\/\/mylovegy.github.io\/yii2-admin\/docs\/images\/docs-login.png)\n2. 数据显示\n![数据显示](https:\/\/mylovegy.github.io\/yii2-admin\/docs\/images\/docs-data.png)\n3. 数据编辑\n![数据显示](https:\/\/mylovegy.github.io\/yii2-admin\/docs\/images\/docs-update.png)\n4. 权限分配\n![权限分配](https:\/\/mylovegy.github.io\/yii2-admin\/docs\/images\/docs-auth.png)\n5. 代码生成\n![代码生成](https:\/\/mylovegy.github.io\/yii2-admin\/docs\/images\/docs-code.png)",
        "me-table": "关于 meTables 配置说明\n====================\n\n## 基础配置项\n\n|配置名称 | 配置类型 | 默认值 | 说明信息|\n|:------------------|:----------|:------|:---------------|\n|title              | string    |       | 表格标题(新增和修改modal弹出标题、导出文件标题)|\n|pk                 | string    | id    | 数据主键值(在批量删除数据时需要)|\n|checkbox           | object    |       | 多选列(多选操作, 不显示设置为 null or false)|\n|params             | object    | null  | 默认查询的参数，会在查询请求时发送给后端|\n|number             | object    |       | 编号列(不显示设置为 null or false)|\n\n## 关于请求地址配置说明\n\n[TOC]\n\n配置名称 | 配置类型 | 默认值 | 说明信息|\n:------------------|:-----------|:-----------|:---------------|\nurlPrefix          | string     |            | 请求路由前缀|\nurlSuffix          | string     |            | 请求路由后缀|\nurl                | object     |            | 请求地址信息|\nurl.search         | string     | search     | 查询数据请求地址|\nurl.create         | string     | create     | 创建数据请求地址|\nurl.update         | string     | update     | 修改数据请求地址|\nurl.delete         | string     | delete     | 删除数据请求地址|\nurl.export         | string     | export     | 导出数据请求地址|\nurl.upload         | string     | upload     | 上传文件请求地址|\nurl.editable       | string     | editable   | 行内编辑请求地址|\nurl.deleteAll      | string     | delete-all | 批量删除请求地址|\n\n如果需要修改某一个地址配置，如下配置:\n\n```js\nvar m = meTables({\n    urlPrefix: \"\/admin\/\",\n    urlSuffix: \".html\",\n    url: {\n        search: \"me-search\"  \n    }\n}); \n```\n\n上面的配置信息，生成的请求地址如下:\n\n> search: localhost\/admin\/me-search.html\n\n> update: localhost\/admin\/update.html\n\n**路由生成规则:urlPrefix + url.action + urlSuffix**\n\n## 关于顶部按钮组的配置信息\n\n配置名称 | 配置类型 | 默认值 | 说明信息\n:------------------|:-----------|:-----------|:---------------\nbuttonSelector          | string     | #me-table-buttons                | jquery 的选择器，按钮组配置信息会以这个为容器，添加到里面$(buttonSelector).append('按钮组信息')\nbuttonType              | string     | append                           | 什么方式添加到选择容器中\nbuttons.create.icon     | string     | ace-icon fa fa-plus-circle blue  | 创建按钮的icon\nbuttons.create.className| string     | btn btn-white btn-primary btn-bold| 创建按钮的class 名称\n\n默认有5个按钮组信息，如下:\n1. create:      创建按钮\n2. updateAll:   修改按钮\n3. deleteAl:    删除按钮\n4. refresh:     刷新按钮\n5. export:      导出按钮\n\n> 每个按钮都有如下按钮配置项: **icon, className** \n\n如果想要不显示那个按钮，只需要那个按钮的配置设置为 `false` 或者 `null`,就好：\n\n```js\nvar m = meTables({\n    buttons: {\n        create: false,\n        updateAll: false\n    }\n});\n```\n\n如果需要添加一个按钮，那么直接配置一个按钮信息:\n\n```js\nvar m = meTables({\n    buttons: {\n        \/\/ 自定义按钮配置\n        customize: {\n            icon: \"ace-icon fa fa-plus-circle yellow\",\n            className: \"btn btn-white btn-primary btn-bold\",\n            text: \"自定义按钮\",          \/\/ 按钮文字\n            \"data-func\": \"customize\"  \/\/ 指定调用自己的那个函数\n        }\n    }\n});\n\n\/\/ 不过自定义按钮，需要给 m 添加函数 函数名称就是配置按钮中 data-func 指定的函数名称\n$.extend(m, {\n    customize: function () {\n        alert(\"My custom button\");\n    }\n});\n```\n\n## 关于表格列中，操作一列的配置信息\n\n|配置名称 | 配置类型 | 默认值 | 说明信息|\n|:------------------|:-----------|:-----------|:---------------|\n|operations.width        | string     | 120px               | 这一列的宽度|\n|operations.buttons.see.title        | string  |                  | 按钮的`title`(缩小按钮需要显示title)|\n|operations.buttons.see.button-title | string  |                  | 按钮的`title`|\n|operations.buttons.see.className    | string  | btn-success      | 按钮的`className`用来控制样式|\n|operations.buttons.see.cClass       | string  | me-table-detail  | 按钮的操作`class`用来处理点击事件|\n|operations.buttons.see.icon         | string  | fa-search-plus   | 按钮的icon|\n|operations.buttons.see.sClass       | string  | blue             | 按钮的颜色|\n\n默认提供三个按钮选项:\n1. see:     查看详情\n2. update:  修改数据\n3. delete:  删除数据\n\n> 每个按钮都有如下配置项字段: **`className`, `title`, `button-title`, `cClass`, `icon`, `sClass`** \n\n### 需要关闭指定按钮的话，配置那个按钮为`null` or `false` 就好\n\n```js\nvar m = meTables({\n    operations: {\n        buttons: {\n            \/\/ 不显示这个按钮\n            see: null,\n            update: null\n        }\n    }\n})\n\n```\n\n### 需要根据这一行的数据，判断显示指定按钮的话，配置按钮`show:function(rows)`方法\n\n`show`函数接受一个参数`rows`(这一行的数据)，需要返回`true`来确定显示\n\n```js\nvar m = meTables({\n    operations: {\n        buttons: {\n            \/\/ 配置show，根据情况显示删除 rows 表示这一行的数据\n            delete: {\n                show: function (rows) {\n                    return rows.status == 1;\n                }\n            }\n        }\n    }\n})\n```\n\n\n\n### 如果需要自定义一个按钮:\n\n>自定义按钮的监听`class`的规则为配置的`cClass` + `sTable`,这个是为了保证多个表格监听的唯一性\n\n```js\nvar m = meTables({\n    sTable: \"#show-table\", \t\/\/ 显示表格选择器\n    operations: {\n        buttons: {\n            \/\/ 添加操作项，自定义按钮\n            other: {\n                title: \"编辑权限\",\n                \"button-title\": \"编辑权限\",\n                className: \"btn-warning\",\n                cClass: \"role-edit\",\n                icon: \"fa-pencil-square-o\",\n                sClass: \"yellow\"\n            }   \n        }  \n    }\n});\n\n\/\/ 需要自己定义点击按钮配置项 监听class 规则 cClass + sTable\n$(document).on('click', '.role-edit-show-table', function () {\n    \n    \/\/ 获取到点击的这一行的数据\n    var data = m.table.data()[$(this).data('row')];\n    \n    \/\/ 自定义处理方式\n    if (data) {\n        alert(\"My custom button\");\n    }\n});\n```\n\n## 关于 jquery.dataTables.js\n\n配置名称 | 配置类型 | 默认值 | 说明信息\n:------------------|:-----------|:-----------|:---------------\ntable              | object     |            | 就是 jquery.dataTables.js 的配置信息\n\n\n### 使用的 `jquery.datatables.js` 中 `columns` 的配置都支持，下面只说几个常用的；[更多信息](http:\/\/www.datatables.club\/reference\/option\/)\n\n配置名称 | 配置类型 | 说明信息\n:------------------|:-----------|:---------------\ntitle        | string     | 这一列的 th 表头信息                 \ndata         | string     | 这一列的数据字段\nrender       | function   | render 函数 [详情说明查看](http:\/\/www.datatables.club\/reference\/option\/columns.render.html)         \ncreatedCell  | function   | createdCell 函数 [详情说明查看](http:\/\/www.datatables.club\/reference\/option\/columns.createdCell.html)\n\n简单说明:\n```js\nvar m = meTables({\n    table: {\n        columns: [\n            {\n                title: \"id\",\n                data: \"id\",\n                render: function (data) {\n                    return data === 1 ? \"yes\" : \"no\";\n                }\n            },\n            {\n                title: \"name\",\n                data: \"name\",\n                createdCell: function (td, data) {\n                    $(td).html(data === 1 ? \"username\": \"name\");\n                }\n            }\n        ]\n    }\n});\n```\n\n### meTables 提供的列的配置信息\n\n配置名称 | 配置类型 | 默认值 | 说明信息\n:------------------|:-----------|:-----------|:---------------\nhide         | boolean     | false      | 这一列是否隐藏 true 表示 隐藏    \nbHide        | boolean     | false      | 这一列是否隐藏 true 表示 隐藏 (hide Alias)\nisHide       | boolean     | false      | 这一列是否隐藏 true 表示 隐藏 (hide Alias)        \nexport       | boolean     | false      | 这一列是否导出\nbExport      | boolean     | false      | 这一列是否导出(export Alias)\nisExport     | boolean     | false      | 这一列是否导出(export Alias)\nview         | boolean     | true       | 这一列是否在详情里面显示出来 false 表示不显示\nbViews       | boolean     | true       | 这一列是否在详情里面显示出来 false 表示不显示 (view Alias)\nisViews      | boolean     | true       | 这一列是否在详情里面显示出来 false 表示不显示 (view Alias)\ndefaultOrder | string      | null       | 默认排序方式 (asc or desc)\nsearch       | object      | undefined  | 搜索表单配置信息\nedit         | object      | undefined  | 编辑表单配置信息\nvalue        | object      | undefined  | 为搜索和编辑表单提供数据支持\n\nConfiguration example:\n```js\nvar m = meTables({\n    table: {\n        columns: [\n            {\n                title: \"id\",\n                data: \"id\",\n                render: function (data) {\n                    return data === 1 ? \"yes\" : \"no\";\n                },\n                defaultOrder: \"desc\",\n                search: {type: \"text\"},\n                edit: {type: \"hidden\"}\n            },\n            {\n                title: \"name\",\n                data: \"name\",\n                createdCell: function (td, data) {\n                    $(td).html(data === 1 ? \"username\": \"name\");\n                },\n                \n                \/**\n                 * 为编辑表单select 提供下拉选项，如下配置生成编辑表单\n                 * <select name=\"username\" required=true number=true>\n                 *     <option value=\"1\">管理员<\/option>\n                 *     <option value=\"2\">用户<\/option>\n                 * <\/select>    \n                 *\/\n                value: {\"1\": \"管理员\", \"2\": \"用户\"},\n                edit: {type: \"select\", required: true, number: true}\n            }\n        ]\n    }\n});\n```\n\n#### 搜索表单type 类型 目前只支持输入框和下拉表单选项:\n\n1. text\n2. select\n\n**可以自定义搜索表单类型:**\n```js\n$.extend(MeTables, {\n    \/**\n     * 定义搜索表达(函数后缀名SearchCreate)\n     * 使用配置 search: {\"type\": \"email\", \"id\": \"search-email\"}\n     * search 里面配置的信息都通过 params 传递给函数\n     *\/\n    \"emailSearchCreate\": function(params) {\n        return '<input type=\"text\" name=\"' + params.name +'\">';\n    }\n});\n```\n\n#### 编辑表单type 支持如下配置类型:\n\n1. text\n2. select\n3. radio\n4. checkbox\n5. hidden\n6. file\n7. textarea\n8. password\n\n**可以自定义类型:**\n```js\n$.extend(MeTables, {\n    \/**\n     * 定义编辑表单(函数后缀名Create)\n     * 使用配置 edit: {\"type\": \"email\", \"id\": \"user-email\"}\n     * edit 里面配置的信息都通过 params 传递给函数\n     *\/\n    \"emailCreate\": function(params) {\n        return '<input type=\"email\" name=\"' + params.name + '\"\/>';\n    }\n});\n```\n\n#### edit 和 search 里面配置的字段信息，都会通过html 属性字段生成到对应表单上面，edit 中可以定义验证字段信息，具体可以查看 [jquery.validate.js的配置信息](https:\/\/jqueryvalidation.org\/documentation\/). .\n```js\nvar m = meTables({\n    table: {\n        columns: [\n            {\n                title: \"id\",\n                data: \"id\",\n                \/\/ 验证字段必须输入，且长度为 2 到 100 个字符\n                edit: {type: \"text\", required: true, rangelength: \"[2, 100]\"}\n            }\n        ]\n    }\n});\n```\n### 说明： \n1. edit 和 search 中的 name 如果没有定义的化，会通过外层配置的 data 属性决定，所以一般可以不用写\n2. edit 和 search 中的 type 默认为 text, 如果类型需要为 text 的话，可以省略不写\n\n## 关于几个事件配置说明\n\n|事件函数名称            | 说明|\n|----------------------|------------|\n|`beforeShow(data)`     | 在弹出 modal 之前触发|\n|`afterShow(data)`      | 在弹出 modal 之后触发|\n|`beforeSave(data)`     | 在编辑之前触发|\n|`afterShow(data)`      | 在编辑之后触发|\n\n>1. **`beforeShow`,`afterShow` 事件，只有在修改的情况下 data 数据为编辑的数据**\n>2. **`beforeSave`,`afterSave` 事件，在创建、修改、删除、多删除 data 数据为对应的表单数据**\n\n上面四个事件函数，如果返回 === `false`, 都将会阻止程序继续执行\n\n```js\n\nvar table = meTables({\n\n})\n\n$.extend(table, {\n    beforeShow: function(data, child) {\n        alert(this.action); \/\/ this.action 只会有: \"update\" or \"create\" 表示是修改和创建时触发\n        if (this.action === \"update\") {\n            console.info(data);\n        }\n    },\n    afterShow: function(data, child) {\n        alert(this.action); \/\/ this.action 只会有: \"update\" or \"create\" 表示是修改和创建时触发\n        if (this.action === \"update\") {\n            console.info(data); \/\/ When modified, data is the data of the table row\n        }\n    },\n    \n    beforeSave: function(data, child) {\n        alert(this.action); \/\/ this.action Can be: \"update\" or \"create\" or \"delete\" or \"delete-all\"\n    },\n    afterSave: function(data, child) {\n        alert(this.action); \/\/ this.action Can be: \"update\" or \"create\" or \"delete\" or \"delete-all\"\n    }\n});\n```\n\n### 说明：\n\n1. 如果想修改和新增表单显示的字段不一致的话，可以在 `beforeShow` 和 `afterShow` 中控制比如控制某个表单的显示隐藏\n\n```js\nvar m = meTables({\n    table: {\n        columns: [\n            {\n                title: \"用户名称\",\n                data: \"username\",\n                edit: {\n                    id: \"username\"\n                }\n            }\n            \n        ]\n    }\n});\n\n\/\/ 用户名字段在创建的时候显示出来，修改的时候隐藏起来\n$.extend(m, {\n    beforeShow: function() {\n        if (this.action === \"update\") {\n            $(\"#username\").hide();\n        } else  {\n            $(\"#username\").show();\n        }\n    }\n});\n```\n\n## 关于文件上传的配置\n\n```js\nvar m = meTables({\n    title: \"管理员信息\",\n    \/\/ 第一步：需要配置一个上传文件选择器数组，一个表单可以配置多个上传文件处理\n    fileSelector: [\"#file\"],\n    table: {\n        columns: [\n            {\n                title: \"头像\",\n                data: \"face\",\n                bHide: true,\n                \/\/ 第二步： 配置字段为上传文件表单\n                edit: {\n                    type: \"file\",\n                    options: {\n                        id: \"file\",\n                        name: \"UploadForm[face]\", \/\/ 这个 name 用来后台接收上传文件字段名称\n                        \"input-name\": \"face\",\n                        \"input-type\": \"ace_file\",\n                        \"file-name\": \"face\"\n                    }\n                }\n            }\n            \n        ]\n    }\n});\n\n\/\/ 第三步：处理上传文件显示问题\n\/\/ 1. 新增处理时候：上传过后，下次再打开不能显示之前的上传文件\n\/\/ 2. 编辑处理时候：这条数据已经上传了文件，那么需要显示出来\n$.extend(m, {\n    beforeShow: function (data) {\n        \n        $(\"#file\").ace_file_input(\"reset_input\");\n        \n        \/\/ 修改复值\n        if (this.action === \"update\" && !empty(data.face)) {\n            $(\"#file\").ace_file_input(\"show_file_list\", [data.face]);\n        }\n    }\n});\n```\n\n[←  关于控制器说明](.\/controller.md)",
        "module": "模块配置说明\n==========\n\n[TOC]\n\n## 模块 `jinxing\\admin\\Module`类的可配置项\n\n[可以直接参考类文件](https:\/\/github.com\/myloveGy\/yii2-admin\/blob\/master\/src\/Module.php)\n\n`Yii2`的配置都是通过数组 `class`字段指定使用类，其他`key`指定类属性的方式去配置的；\n所以可以直接参考类有哪些属性，就可以在配置文件中指定\n\n例如: \n```php\n$config = [\n    'modules'             => [\n        'admin' => [\n             \/\/ 指定模块使用 后台模块类\n            'class' => 'jinxing\\admin\\Module',\n            \n            \/\/ 指定模块类 $user 属性值， 确定模块使用的 登录用户组件名称\n            'user'  => 'user',\n        ],\n    ],\n];\n```\n\n### 可配置属性列表\n\n该列表只是列出的 `jinxing\\admin\\Module` 自定义的属性，其父类的属性 `yii\\base\\Module` [参考](https:\/\/www.yiichina.com\/doc\/api\/2.0\/yii-base-module)\n\n| 名称 | 类型 | 默认值 | 说明 |\n|:--------|:-----|:----|:------|\n|`$user`|`string`|`admin`|使用的登录用户组件名称|\n|`$allowControllers`|`array`|`['default']`|不需要验证权限的控制器|\n|`$verifyAuthority`|`boolean`|`true`|是否需要验证权限|\n|`$defaultAction`|`string`|`default\/system`|登录成功欢迎页面的路由|\n|`$frameNumberSize`|`int`|8|后台界面允许开启`iframe`的个数,超过会隐藏|\n|`$frameNumbershowClose`|`int`|3|后台界面开启多少个`iframe`显示关闭全部按钮|\n|`$leftTopButtons`|`array`| `[...]`|后台界面左侧按钮配置 |\n|`$userLinks`|`array`|`[...]`|后台界面登录用户右侧按钮配置|\n\n\n## `Yii2`高级版后台配置模板\n\nmain.php 部分代码，请不要直接复制粘贴\n\n```php\nreturn [\n    \/\/ ... 你的其他配置项\n    \n    \/\/ 后台模块配置\n    'modules'             => [\n        'admin' => [\n            'class' => 'jinxing\\admin\\Module',\n            'user'  => 'user',\n        ],\n    ],\n    'components'          => [\n    \n        \/\/ ... 你的其他配置\n        \n        \n        'user'         => [\n            'identityClass'   => 'jinxing\\admin\\models\\Admin',\n            'loginUrl'        => '\/admin\/default\/login',\n            'enableAutoLogin' => true,\n            'identityCookie'  => ['name' => '_identity-backend', 'httpOnly' => true],\n        ],\n        \n        \/\/ 后台模块相关的配置 start ---------------------->\n        \/\/ 错误处理，这个视自己情况配置\n        'errorHandler' => [\n            'errorAction' => 'admin\/default\/error',\n        ],\n        \n        \/\/ 权限配置使用 db\n        'authManager'  => [\n            'class' => 'yii\\rbac\\DbManager',\n        ],\n        \n        \/\/ 路由美化配置，建议单非必要配置\n        'urlManager' => [\n            'enablePrettyUrl' => true,\n            'showScriptName'  => false,\n            'rules'           => [\n            ],\n        ],\n        \n        \/\/ 资源管理，一定要配置， Yii2 默认使用的jquery 版本 和 使用的 ace admin jquery 有冲突\n        'assetManager' => [\n            'bundles' => [\n                \/\/ 去掉自己的bootstrap 资源\n                'yii\\bootstrap\\BootstrapAsset' => [\n                    'css' => [],\n                ],\n                \/\/ 去掉自己加载的Jquery\n                'yii\\web\\JqueryAsset'          => [\n                    'sourcePath' => null,\n                    'js'         => [],\n                ],\n            ],\n        ],\n        \n        \/\/ 使用语言配置信息\n        'i18n' => [\n            'translations' => [\n                'admin' => [\n                    'class'          => 'yii\\i18n\\PhpMessageSource',\n                    'sourceLanguage' => 'en',\n                    'basePath'       => '@jinxing\/admin\/messages',\n                ],\n            ],\n        ],\n        \n        \/\/ 后台模块相关的配置 end ---------------------->\n    ],\n    \n];\n```\n\n### 参考项目\n\n- [Yii2 Ace Admin](https:\/\/github.com\/myloveGy\/yii2-ace-admin)\n- [Yii2 Ace Admin 项目预览](https:\/\/yii2.sh-jinger.com)\n\n- 账号: admin 密码： admin888\n\n## `Yii2`基础版后台配置模板 \n\nweb.php 部分代码，请不要直接复制粘贴\n\n```php\n\n$config = [\n\n    \/\/ ... 你的其他配置\n\n\n    \/\/ 后台模块配置，注意这里是两层模块\n    'modules'    => [\n        'admin' => [\n            'class'   => 'app\\modules\\admin\\Admin',\n            'user'    => 'admin',\n            'modules' => [\n                'admin' => [\n                    'class'          => 'jinxing\\admin\\Module',\n                    'user'           => 'admin',\n                    'leftTopButtons' => [],\n                    'userLinks'      => [],\n                ],\n            ],\n        ],\n    ],\n    'components' => [\n        \/\/ ... 你的其他配置\n        \n        \/\/ 前端用户组件\n        'user' => [\n            'identityClass'   => 'app\\models\\User',\n            'enableAutoLogin' => true,\n            'idParam'         => '_userId',\n            'loginUrl'        => ['\/'],\n            'identityCookie'  => ['name' => '_user', 'httpOnly' => true],\n        ],\n        \n        \/\/ 后台模块相关的配置 start ---------------------->\n        \/\/ 后端用户组件\n        'admin' => [\n            'class'           => 'yii\\web\\User',\n            'identityClass'   => 'jinxing\\admin\\models\\Admin',\n            'enableAutoLogin' => true,\n            'loginUrl'        => ['\/admin\/admin\/default\/login'],\n            'idParam'         => '_adminId',\n            'identityCookie'  => ['name' => '_admin', 'httpOnly' => true],\n        ],\n        \n        \/\/ 错误处理，这个视自己情况配置\n        'errorHandler' => [\n            'errorAction' => 'admin\/default\/error',\n        ],\n        \n        \/\/ 权限配置使用 db\n        'authManager'  => [\n            'class' => 'yii\\rbac\\DbManager',\n        ],\n        \n        \/\/ 路由美化配置，建议但非必要配置\n        'urlManager' => [\n            'enablePrettyUrl' => true,\n            'showScriptName'  => false,\n            'rules'           => [\n                   \/\/ ... 可以配置你的定制路由\n            ],\n        ],\n                \n        \/\/ 使用语言配置信息\n        'i18n' => [\n            'translations' => [\n                'admin' => [\n                    'class'          => 'yii\\i18n\\PhpMessageSource',\n                    'sourceLanguage' => 'en',\n                    'basePath'       => '@jinxing\/admin\/messages',\n                ],\n            ],\n        ],\n        \n        \/\/ 后台模块相关的配置 end ---------------------->\n    ],\n];\n```\n\n### 关于两层模块配置\n\n因为是基础版本，没有前后台分开，需要需要一个配置一个后台模块，这个是第一层模块配置\n\n然后你这个模块需要使用 `jinxing\/yii2-admin` 这个模块的功能，所以需要在你的后台模块中配置`jinxing\/yii2-admin`\n\n这个是第二层模块\n\n>比较简单的配置自己后台模块的方法，你的后台模块类继承`jinxing\\admin\\Module`，你的后台模块就可以像`jinxing\\admin\\Module`\n那样配置,模块的里面的控制器直接继承 `jinxing\\admin\\controllers\\Controller`\n\n上面的只是建议，如果不用继承的方式，自己生成模块，控制器，处理方式可参考 高级版本\n\n### 注意事项\n\n因为是两层模块，所以在初始化数据迁移之前，一定要在`params.php`文件中配置好`admin_rule_prefix`\n这个参数;如果按照上面的配置\n\n配置规则：`你的模块\/后台模块名称`\n\nparams.php 文件\n\n```php\nreturn [\n    \/\/ 配置后台模块导入菜单、权限 的路由前缀\n    'admin_rule_prefix' => 'admin\/admin',\n];\n```\n\n将配置配置好， 再使用数据库迁移功能\n\n### 参考项目\n\n- [考试系统](https:\/\/github.com\/myloveGy\/examination)\n- [考试系统预览](https:\/\/examination.sh-jinger.com\/admin)\n\n- 账号: admin 密码：admin123\n\n## 其他配置说明\n\n### `$user` 的说明\n\n`$user`指定模块使用的登录用户的组件；在项目中，可能会存在多个登录用户组件；\n例如基础版本，前台用户组件和后台用户组件\n\n```php\n$config = [\n    'components' => [\n        \/\/ 前台登录用户\n        'user' => [\n            'identityClass'   => 'app\\models\\User',\n            'enableAutoLogin' => true,\n            'idParam'         => '_userId',\n            'loginUrl'        => ['\/'],\n            'identityCookie'  => ['name' => '_user', 'httpOnly' => true],\n        ],\n        \n        \/\/ 后台登录用户\n        'admin' => [\n            'class'           => 'yii\\web\\User',\n            'identityClass'   => 'jinxing\\admin\\models\\Admin',\n            'enableAutoLogin' => true,\n            'loginUrl'        => ['\/admin\/admin\/default\/login'],\n            'idParam'         => '_adminId',\n            'identityCookie'  => ['name' => '_admin', 'httpOnly' => true],\n        ],\n    ]\n];\n```\n\n>因为默认`$user = 'admin';`所以在`Yii2`高级版本，虽然是前后台项目分开，后台只有\n一个用户组件，但`Yii2`默认的用户组件名称为`user`,所以配置的时候，需要配置`'user' => 'user'`\n\n```php\n$config = [\n    \/\/ ... 你的其他配置\n    'modules'             => [\n        'admin' => [\n            'class' => 'jinxing\\admin\\Module',\n            'user'  => 'user',\n        ],\n    ],\n    'components'          => [\n        'user'         => [\n            'identityClass'   => 'jinxing\\admin\\models\\Admin',\n            'loginUrl'        => '\/admin\/default\/login',\n            'enableAutoLogin' => true,\n            'identityCookie'  => ['name' => '_identity-backend', 'httpOnly' => true],\n        ],\n        \n        \/\/ ... 你的其他配置\n    ]\n];\n```\n\n\n### `$leftTopButtons` 的说明\n\n![leftTopButtons配置说明](.\/images\/left-top-buttons.png)\n\n不需要的话，配置为空数组\n\n```php\n$config = [\n    'modules' => [\n        'admin' => [\n            'class'          => 'jinxing\\admin\\Module',\n            'leftTopButtons' => [],\n        ],\n    ],\n];\n```\n\n### `$userLinks` 的说明\n\n![userLinks配置说明](.\/images\/user-links.png)\n\n不需要的话，配置为空数组\n\n```php\n$config = [\n    'modules' => [\n        'admin' => [\n            'class'     => 'jinxing\\admin\\Module',\n            'userLinks' => [],\n        ],\n    ],\n];\n```\n\n [ 关于 controller 配置 →](.\/controller.md)"
    },
    "msg": "ok"
}